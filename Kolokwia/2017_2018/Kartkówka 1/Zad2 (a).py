def fill_list_ints(lst: list):
    print(f'Please provide {len(lst)} integers separated by newline.')
    for i in range(len(lst)):
        while True:
            try:
                user_input = int(input(f'{i+1}. value > '))
                break
            except ValueError:
                print('Wrong value passed. Please try again.')
        lst[i] = user_input


def longest_consistent_increasing_subsequence_length(lst: list) -> int:
    max_length = current_length = 1
    sum_indices = 0
    sum_values = prev_val = lst[0]

    for i in range(1, len(lst)):
        if lst[i] > prev_val:
            current_length += 1
            sum_indices += i
            sum_values += lst[i]
            if current_length > max_length and sum_indices == sum_values:
                max_length = current_length
        else:
            prev_val = sum_values = lst[i]
            current_length = 1
            sum_indices = i

    return 0 if max_length == 1 else max_length


if __name__ =='__main__':
    N = 13
    tab = [0] * N
    fill_list_ints(tab)
    print(longest_consistent_increasing_subsequence_length(tab))

    # min_len = 800
    # import random
    # while True:
    #     tab = [random.randint(0, 1000) for _ in range(N)]
    #     if longest_consistent_increasing_subsequence_length(tab) >= min_len:
    #         print('\n'.join(str(v) for v in tab))
    #         break

'''
Test case for array of 30 elements:
34 
23 
12 
2313 
341 
123 
14 
93 
83 
61 
82 
283 
278 
2 
5 
21 
30 
68 
123 
93 
1 
2 
60 
90 
123 
342
12
42
32
231



1000 elements:
328
935
136
889
944
905
244
559
498
489
235
952
33
787
8
986
327
998
547
209
668
45
1000
71
92
327
508
883
199
749
480
434
898
706
790
836
232
147
74
907
646
332
797
700
201
687
538
15
199
389
202
64
989
114
614
576
528
624
990
384
573
755
255
987
947
395
574
672
922
989
253
649
711
550
336
308
487
397
790
666
749
389
911
1
950
363
399
760
373
347
138
682
251
657
467
845
154
22
86
624
920
216
485
612
740
29
696
192
866
836
61
569
595
142
421
719
918
378
646
347
627
395
46
988
838
553
208
232
331
623
109
216
311
588
57
169
112
592
479
549
511
713
438
227
772
333
59
614
896
330
593
972
681
289
627
441
38
788
438
621
811
226
24
383
798
196
102
738
30
614
750
616
640
549
185
530
985
409
646
244
719
381
451
875
258
731
907
850
308
610
57
922
468
2
717
717
475
569
627
914
491
698
614
197
285
852
571
297
135
874
686
72
861
348
896
485
248
155
69
728
695
174
858
261
792
572
33
661
973
623
226
222
626
489
266
44
299
306
120
679
921
211
849
300
63
332
187
793
237
100
883
293
904
996
185
560
150
67
67
132
814
624
73
664
978
850
697
752
891
929
399
122
605
368
211
529
713
294
516
984
711
114
263
260
649
108
352
609
835
841
95
960
709
863
712
599
67
849
305
875
250
527
251
569
289
417
601
715
325
88
789
523
227
717
646
34
925
245
138
292
416
972
145
712
13
179
546
327
701
11
31
953
659
136
849
919
766
757
122
584
429
21
37
690
147
890
932
328
693
923
543
27
994
442
835
294
624
130
987
334
936
895
878
504
953
114
401
186
688
597
777
11
54
632
591
715
74
691
892
334
568
703
649
325
208
54
152
683
781
468
623
314
48
57
444
556
364
546
835
926
301
724
807
843
264
982
816
18
912
967
910
176
533
998
94
816
49
410
209
730
648
72
768
754
497
94
330
537
296
395
596
923
824
907
521
612
741
387
101
298
577
707
887
581
758
678
87
807
431
422
385
209
407
448
589
546
616
777
328
158
338
751
768
659
668
225
976
581
18
449
691
62
101
980
810
626
330
723
800
263
9
224
630
621
216
845
231
448
890
548
259
538
499
69
893
103
372
411
742
895
23
686
11
517
161
247
590
637
523
18
250
779
574
157
606
156
740
77
34
514
353
398
533
356
305
748
780
499
755
166
565
30
539
238
724
515
834
312
110
87
585
582
511
197
243
400
197
622
181
181
629
243
498
903
982
567
846
675
522
233
129
203
170
12
922
412
682
142
219
8
337
519
937
825
663
488
113
562
591
32
751
616
132
153
602
211
42
241
513
752
265
104
879
697
81
830
221
796
396
992
735
773
708
112
590
314
513
628
788
978
381
587
121
214
57
142
462
651
221
973
713
515
783
382
857
810
187
399
808
117
868
603
17
257
519
182
75
881
177
851
381
777
100
511
597
668
727
687
490
45
662
229
81
623
390
953
785
625
914
22
755
493
908
341
839
146
978
470
356
18
15
456
4
619
387
347
256
90
81
819
60
230
348
302
838
277
893
610
930
476
815
243
361
522
910
685
387
243
671
523
739
697
791
768
739
238
673
120
437
61
560
341
721
930
312
335
738
57
283
479
980
197
139
331
352
20
358
940
790
920
131
71
279
557
640
766
742
336
534
596
636
552
229
999
112
929
225
98
19
654
712
611
828
151
324
286
918
469
243
120
609
407
596
350
823
345
112
230
844
310
444
836
439
593
995
143
688
250
174
433
820
218
568
109
181
725
788
940
211
399
809
531
189
347
293
722
911
93
301
902
164
785
531
784
721
290
228
448
617
834
588
693
786
371
761
903
598
607
659
578
231
162
930
42
263
991
407
701
469
834
91
985
518
303
477
906
155
663
54
530
586
471
483
359
319
628
839
480
646
890
766
904
167
321
771
848
281
491
842
465
373
564
967
982
963
170
375
53
884
471
343
292
130
211
272
903
283
519
331
349
914
437
248
214
200
69
132
785
871
127
686
937
282
70
267
892
221
36
374
394
82
909
642
669
276
870
306
429
8
21
762
843
771
459
930
951
55
701
453
982
820
308
276
976
664
491
826
509
125
413
197
854
356
882
339
4
373
638
888
57
555
870
509
449
155
788
237
564
470
218
760
656
546
368
615
901
22
363
431
981
687
422
850
16
549
754
235
737
577
412
861
627
766
102
897
167
546
698
430
17
739
543
716
48
194
613
157
650
561
289
574
502
230
370
662
792
36
369
245
740
'''
